Description: Do not test the namespace deprecation warning
Author: Thomas Goirand <zigo@debian.org>
Forwarded: not-needed
Last-Update: 2014-02-08

--- python-oslo.serialization-1.2.0.orig/tests/test_warning.py
+++ python-oslo.serialization-1.2.0/tests/test_warning.py
@@ -30,32 +30,3 @@ class DeprecationWarningTest(test_base.B
         self.assertIn('oslo_serialization', args[0][0])
         self.assertIn('deprecated', args[0][0])
         self.assertTrue(issubclass(args[0][1], DeprecationWarning))
-
-    def test_real_warning(self):
-        with warnings.catch_warnings(record=True) as warning_msgs:
-            warnings.resetwarnings()
-            warnings.simplefilter('always', DeprecationWarning)
-            import oslo.serialization
-
-            # Use a separate function to get the stack level correct
-            # so we know the message points back to this file. This
-            # corresponds to an import or reload, which isn't working
-            # inside the test under Python 3.3. That may be due to a
-            # difference in the import implementation not triggering
-            # warnings properly when the module is reloaded, or
-            # because the warnings module is mostly implemented in C
-            # and something isn't cleanly resetting the global state
-            # used to track whether a warning needs to be
-            # emitted. Whatever the cause, we definitely see the
-            # warnings.warn() being invoked on a reload (see the test
-            # above) and warnings are reported on the console when we
-            # run the tests. A simpler test script run outside of
-            # testr does correctly report the warnings.
-            def foo():
-                oslo.serialization.deprecated()
-
-            foo()
-            self.assertEqual(1, len(warning_msgs))
-            msg = warning_msgs[0]
-            self.assertIn('oslo_serialization', six.text_type(msg.message))
-            self.assertEqual('test_warning.py', os.path.basename(msg.filename))
