Description: Do not use u'' strings
Author: Thomas Goirand <zigo@debian.org>
Forwarded: not-needed
Last-Update: 2014-09-05

--- python-oslo.serialization-0.1.0.orig/tests/test_jsonutils.py
+++ python-oslo.serialization-0.1.0/tests/test_jsonutils.py
@@ -73,24 +73,24 @@ class JSONUtilsTestMixin(object):
 
     def test_loads_unicode(self):
         self.assertIsInstance(jsonutils.loads(b'"foo"'), six.text_type)
-        self.assertIsInstance(jsonutils.loads(u'"foo"'), six.text_type)
+        self.assertIsInstance(jsonutils.loads(six.u('"foo"')), six.text_type)
 
         # 'test' in Ukrainian
-        i18n_str_unicode = u'"\u0442\u0435\u0441\u0442"'
+        i18n_str_unicode = six.u('"\u0442\u0435\u0441\u0442"')
         self.assertIsInstance(jsonutils.loads(i18n_str_unicode), six.text_type)
 
         i18n_str = i18n_str_unicode.encode('utf-8')
         self.assertIsInstance(jsonutils.loads(i18n_str), six.text_type)
 
     def test_loads_with_kwargs(self):
-        jsontext = u'{"foo": 3}'
+        jsontext = six.u('{"foo": 3}')
         result = jsonutils.loads(jsontext, parse_int=lambda x: 5)
         self.assertEqual(5, result['foo'])
 
     def test_load(self):
 
-        jsontext = u'{"a": "\u0442\u044d\u0441\u0442"}'
-        expected = {u'a': u'\u0442\u044d\u0441\u0442'}
+        jsontext = six.u('{"a": "\u0442\u044d\u0441\u0442"}')
+        expected = {six.u('a'): six.u('\u0442\u044d\u0441\u0442')}
 
         for encoding in ('utf-8', 'cp1251'):
             fp = six.BytesIO(jsontext.encode(encoding))
@@ -211,9 +211,9 @@ class ToPrimitiveTestCase(test_base.Base
     def test_typeerror(self):
         x = bytearray  # Class, not instance
         if six.PY3:
-            self.assertEqual(jsonutils.to_primitive(x), u"<class 'bytearray'>")
+            self.assertEqual(jsonutils.to_primitive(x), six.u("<class 'bytearray'>"))
         else:
-            self.assertEqual(jsonutils.to_primitive(x), u"<type 'bytearray'>")
+            self.assertEqual(jsonutils.to_primitive(x), six.u("<type 'bytearray'>"))
 
     def test_nasties(self):
         def foo():
@@ -221,7 +221,7 @@ class ToPrimitiveTestCase(test_base.Base
         x = [datetime, foo, dir]
         ret = jsonutils.to_primitive(x)
         self.assertEqual(len(ret), 3)
-        self.assertTrue(ret[0].startswith(u"<module 'datetime' from "))
+        self.assertTrue(ret[0].startswith(six.u("<module 'datetime' from ")))
         if six.PY3:
             self.assertTrue(ret[1].startswith(
                 '<function ToPrimitiveTestCase.test_nasties.<locals>.foo at 0x'
--- python-oslo.serialization-0.1.0.orig/doc/source/conf.py
+++ python-oslo.serialization-0.1.0/doc/source/conf.py
@@ -37,8 +37,8 @@ source_suffix = '.rst'
 master_doc = 'index'
 
 # General information about the project.
-project = u'oslo.serialization'
-copyright = u'2014, OpenStack Foundation'
+project = 'oslo.serialization'
+copyright = '2014, OpenStack Foundation'
 
 # If true, '()' will be appended to :func: etc. cross-reference text.
 add_function_parentheses = True
@@ -67,8 +67,8 @@ htmlhelp_basename = '%sdoc' % project
 latex_documents = [
     ('index',
      '%s.tex' % project,
-     u'%s Documentation' % project,
-     u'OpenStack Foundation', 'manual'),
+     '%s Documentation' % project,
+     'OpenStack Foundation', 'manual'),
 ]
 
 # Example configuration for intersphinx: refer to the Python standard library.
